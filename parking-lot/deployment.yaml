apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "rest-proxy.fullname" . }}
  labels:
{{ include "rest-proxy.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "rest-proxy.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "rest-proxy.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: app-config
          configMap:
            name: {{ .Release.Name }}-configmap
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 8080
{{ if and .Values.enableBasicAuth (eq .Values.enableBasicAuth  true ) }}
              httpHeaders:
                - name: Authorization
                  value: {{ .Values.consumerBasicAuthConfig }}
{{ end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
{{ if and .Values.enableBasicAuth (eq .Values.enableBasicAuth  true ) }}
              httpHeaders:
                - name: Authorization
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-basic-secret
                      key: CONSUMER_BASIC_AUTH
{{ end }}
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
            - name: KAFKA_REST_BOOTSTRAP_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-configmap
                  key: BOOTSTRAP_SERVERS
            - name: KAFKA_REST_CLIENT_BOOTSTRAP_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-configmap
                  key: BOOTSTRAP_SERVERS
            - name: KAFKA_REST_CLIENT_SASL_JAAS_CONFIG
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-sasl-secret
                  key: SASL_JAAS_CONFIG
            - name: KAFKA_REST_CLIENT_SASL_MECHANISM
              value: PLAIN
            - name: KAFKA_REST_CLIENT_SECURITY_PROTOCOL
              value: SASL_SSL
            - name: KAFKA_REST_CLIENT_SSL_ENDPOINT_IDENTIFIED_ALGORITHM
              value: https
            - name: KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS
              value: "30000"
            - name: KAFKA_REST_HOST_NAME
              value: rest-proxy
            - name: KAFKA_REST_LISTENERS
              value: http://0.0.0.0:80
            - name: KAFKA_REST_REQUEST_TIMEOUT_MS
              value: "20000"
            - name: KAFKA_REST_RETRY_BACKOFF_MS
              value: "500"
            - name: KAFKA_REST_SASL_JAAS_CONFIG
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-sasl-secret
                  key: SASL_JAAS_CONFIG
            - name: KAFKA_REST_SASL_MECHANISM
              value: PLAIN
            - name: KAFKA_REST_SCHEMA_REGISTRY_URL
              value: http://schema-registry:8085
            - name: KAFKA_REST_SECURITY_PROTOCOL
              value: SASL_SSL
            - name: KAFKA_REST_SSL_ENDPOINT_IDENTIFIED_ALGORITHM
              value: https
# Basic auth - rest proxy settings
{{ if and .Values.enableBasicAuth (eq .Values.enableBasicAuth  true ) }}
            - name: KAFKA_REST_AUTHENTICATION_METHOD
              value: BASIC
            - name: KAFKA_REST_AUTHENTICATION_REALM
              value: KafkaServer
            - name: KAFKA_REST_AUTHENTICATION_ROLES
              value: {{ .Values.consumerBasicAuthRole }}
            - name: KAFKAREST_OPTS
              value: "-Djava.security.auth.login.config=/etc/kafka-rest/rest-jaas.properties" 
{{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

# Basic auth - rest proxy  mount property
{{ if and .Values.enableBasicAuth (eq .Values.enableBasicAuth  true ) }}
          volumeMounts:
            - mountPath: /etc/kafka-rest/rest-jaas.properties
              subPath: rest-jaas.properties
              name: app-config
          volumeMounts:
            - mountPath: /etc/kafka-rest/password.properties
              subPath: CONSUMER_JAAS_CONFIG
              name: secret-config
{{ end }}
      volumes:
        - name: app-config
          configMap:
            name: {{ .Release.Name }}-configmap
        - name: secret-config
          secret:
            secretName: {{ .Release.Name }}-basic-secret
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
